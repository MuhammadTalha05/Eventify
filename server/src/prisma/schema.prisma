generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  ADMIN
  PARTICIPANT
}

enum eventType {
  ONSITE
  ONLINE
}

enum eventStatus {
  DRAFT
  ACTIVE
  ENDED
  CANCELLED
}

enum participantStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}

enum otpPurpose {
  LOGIN
}

model user {
  id            String            @id @default(uuid())
  fullName      String            @db.VarChar(150)
  email         String            @unique @db.VarChar(255)
  phone         String            @db.VarChar(20)
  passwordHash  String?
  role          userRole          @default(PARTICIPANT)
  avatarUrl     String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  events        event[]           @relation("UserEvents")
  participants  eventParticipant[]
  otpRequests   otpRequest[]
  refreshToken  refreshToken?  @relation("UserRefreshTokens")
}

model event {
  id                     String             @id @default(uuid())
  title                  String             @db.VarChar(200)
  description            String
  hostId                 String
  totalSeats             Int?
  confirmedParticipants  Int                @default(0)
  type                   eventType
  venue                  String?
  joinLink               String?
  startTime              DateTime
  endTime                DateTime
  contactEmail           String             @db.VarChar(255)
  contactPhone           String?            @db.VarChar(20)
  status                 eventStatus        @default(DRAFT)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  host                   user               @relation("UserEvents", fields: [hostId], references: [id])
  attachments            eventAttachment[]
  participants           eventParticipant[]
  joiningCriteria        joiningCriteria[]
}

model eventAttachment {
  id          String   @id @default(uuid())
  eventId     String
  fileUrl     String
  fileType    String   @db.VarChar(50)
  uploadedAt  DateTime @default(now())

  event event @relation(fields: [eventId], references: [id])
}

model eventParticipant {
  id          String             @id @default(uuid())
  eventId     String
  userId      String
  status      participantStatus  @default(PENDING)
  joinedAt    DateTime           @default(now())

  event   event @relation(fields: [eventId], references: [id])
  user    user  @relation(fields: [userId], references: [id])
  answers criteriaAnswer[]
}

model joiningCriteria {
  id            String   @id @default(uuid())
  eventId       String
  questionText  String

  event   event            @relation(fields: [eventId], references: [id])
  answers criteriaAnswer[]
}

model criteriaAnswer {
  id             String   @id @default(uuid())
  criteriaId     String
  participantId  String
  answerText     String

  criteria    joiningCriteria  @relation(fields: [criteriaId], references: [id])
  participant eventParticipant @relation(fields: [participantId], references: [id])
}

model otpRequest {
  id         String      @id @default(uuid())
  userId     String
  otpCode    String      @db.VarChar(6)
  purpose    otpPurpose
  expiresAt  DateTime
  used       Boolean     @default(false)
  createdAt  DateTime    @default(now())

  user user @relation(fields: [userId], references: [id])
}

model refreshToken {
  id        String   @id @default(cuid())
  user      user     @relation("UserRefreshTokens", fields: [userId], references: [id])
  userId    String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
}